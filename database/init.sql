-- MySQL Script generated by MySQL Workbench
-- Tue May 21 18:23:18 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema db_ledger
-- -----------------------------------------------------
-- Ledger Money Information

-- -----------------------------------------------------
-- Schema db_ledger
--
-- Ledger Money Information
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `db_ledger` DEFAULT CHARACTER SET utf8 COLLATE utf8_spanish2_ci ;
USE `db_ledger` ;

-- -----------------------------------------------------
-- Table `db_ledger`.`CAT_Expense_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`CAT_Expense_Type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(100) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_expense_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`CAT_Vendor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`CAT_Vendor` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(45) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_vendor_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`CAT_Financing_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`CAT_Financing_Type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(100) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_financing_type_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Financing_Entity`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Financing_Entity` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `financing_type_id` INT NOT NULL,
  `name` VARCHAR(20) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_financing_entity_UNIQUE` (`id` ASC),
  UNIQUE INDEX `name_financing_entity_UNIQUE` (`name` ASC),
  INDEX `fk_financing_entity_financing_type_idx` (`financing_type_id` ASC),
  CONSTRAINT `fk_financing_entity_financing_type`
    FOREIGN KEY (`financing_type_id`)
    REFERENCES `db_ledger`.`CAT_Financing_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Currency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Currency` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(20) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  `symbol` VARCHAR(3) NOT NULL,
  `conversion` DECIMAL NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_currency_UNIQUE` (`id` ASC),
  UNIQUE INDEX `name_currency_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Owner`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Owner` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `currency_id` INT NOT NULL,
  `email` VARCHAR(120) CHARACTER SET 'utf8' NOT NULL,
  `username` VARCHAR(20) CHARACTER SET 'utf8' NOT NULL,
  `fullname` VARCHAR(200) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_owner_UNIQUE` (`id` ASC),
  UNIQUE INDEX `email_owner_UNIQUE` (`email` ASC),
  INDEX `fk_owner_currency_idx` (`currency_id` ASC),
  CONSTRAINT `fk_owner_currency`
    FOREIGN KEY (`currency_id`)
    REFERENCES `db_ledger`.`Currency` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`CAT_Wallet_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`CAT_Wallet_Type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(40) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_wallet_type_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Wallet`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Wallet` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `owner_id` INT NOT NULL,
  `wallet_type_id` INT NOT NULL,
  `currency_id` INT NOT NULL,
  `name` VARCHAR(40) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_wallet_UNIQUE` (`id` ASC),
  INDEX `fk_wallet_wallet_type_idx` (`wallet_type_id` ASC),
  INDEX `fk_wallet_owner_idx` (`owner_id` ASC),
  INDEX `fk_wallet_currency_idx` (`currency_id` ASC),
  CONSTRAINT `fk_wallet_wallet_type`
    FOREIGN KEY (`wallet_type_id`)
    REFERENCES `db_ledger`.`CAT_Wallet_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_wallet_owner`
    FOREIGN KEY (`owner_id`)
    REFERENCES `db_ledger`.`Owner` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_wallet_currency`
    FOREIGN KEY (`currency_id`)
    REFERENCES `db_ledger`.`Currency` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Cash`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Cash` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `wallet_id` INT NOT NULL,
  `total` DOUBLE NOT NULL,
  `active` TINYINT(2) NOT NULL DEFAULT 1,
  INDEX `fk_cash_wallet_idx` (`wallet_id` ASC),
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_cash_UNIQUE` (`id` ASC),
  CONSTRAINT `fk_cash_wallet`
    FOREIGN KEY (`wallet_id`)
    REFERENCES `db_ledger`.`Wallet` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Saving`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Saving` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `wallet_id` INT NOT NULL,
  `entity_id` INT NOT NULL,
  `name` VARCHAR(40) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  `interes_rate` DOUBLE NOT NULL DEFAULT 0,
  `total` DOUBLE NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_saving_UNIQUE` (`id` ASC),
  INDEX `fk_savings_financing_wallet_idx` (`entity_id` ASC),
  INDEX `fk_savings_financing_entity_idx` (`wallet_id` ASC),
  CONSTRAINT `fk_savings_financing_wallet`
    FOREIGN KEY (`wallet_id`)
    REFERENCES `db_ledger`.`Wallet` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_savings_financing_entity`
    FOREIGN KEY (`entity_id`)
    REFERENCES `db_ledger`.`Financing_Entity` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Debit_Card`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Debit_Card` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `saving_id` INT NOT NULL,
  `cut_day` INT(2) NOT NULL,
  `ending` VARCHAR(5) CHARACTER SET 'utf8' NOT NULL,
  `expiration` VARCHAR(7) CHARACTER SET 'utf8' NOT NULL,
  `card_type` TINYINT(4) NOT NULL,
  `color` VARCHAR(12) CHARACTER SET 'utf8' NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_debit_card_UNIQUE` (`id` ASC),
  INDEX `fk_debit_card_savings_idx` (`saving_id` ASC),
  CONSTRAINT `fk_debit_card_savings`
    FOREIGN KEY (`saving_id`)
    REFERENCES `db_ledger`.`Saving` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Credit_Card`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Credit_Card` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `entity_id` INT NOT NULL,
  `wallet_id` INT NOT NULL,
  `credit` DOUBLE NOT NULL,
  `use_credit` DOUBLE NOT NULL,
  `cut_day` INT(2) NOT NULL,
  `due_day` INT(2) NOT NULL,
  `expiration` VARCHAR(7) CHARACTER SET 'utf8' NOT NULL,
  `card_type` TINYINT(4) NOT NULL,
  `ending` VARCHAR(5) CHARACTER SET 'utf8' NULL DEFAULT '00000',
  `color` VARCHAR(12) CHARACTER SET 'utf8' NULL DEFAULT 'black',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_credit_card_UNIQUE` (`id` ASC),
  INDEX `fk_credit_card_financing_entity_idx` (`entity_id` ASC),
  INDEX `fk_credit_card_wallet_idx` (`wallet_id` ASC),
  CONSTRAINT `fk_credit_card_financing_entity`
    FOREIGN KEY (`entity_id`)
    REFERENCES `db_ledger`.`Financing_Entity` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_credit_card_wallet`
    FOREIGN KEY (`wallet_id`)
    REFERENCES `db_ledger`.`Wallet` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Payment_Frequency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Payment_Frequency` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  `months` INT(2) NOT NULL,
  `years` INT(2) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `idFrecuenciaPago_UNIQUE` (`id` ASC),
  UNIQUE INDEX `nombre_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Subscription`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Subscription` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `currency_id` INT NOT NULL,
  `wallet_id` INT NOT NULL,
  `payment_frequency_id` INT NOT NULL,
  `name` VARCHAR(40) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  `price` DOUBLE NOT NULL DEFAULT 0,
  `active` TINYINT(2) NOT NULL DEFAULT 1,
  `charge_day` INT(2) NOT NULL,
  `last_payment_date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_subscription_UNIQUE` (`id` ASC),
  INDEX `fk_subscription_currency_idx` (`currency_id` ASC),
  INDEX `fk_subscription_wallet_idx` (`wallet_id` ASC),
  INDEX `fk_subscription_payment_frequency_idx` (`payment_frequency_id` ASC),
  CONSTRAINT `fk_subscription_currency`
    FOREIGN KEY (`currency_id`)
    REFERENCES `db_ledger`.`Currency` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_subscription_wallet`
    FOREIGN KEY (`wallet_id`)
    REFERENCES `db_ledger`.`Wallet` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_subscription_payment_frequency`
    FOREIGN KEY (`payment_frequency_id`)
    REFERENCES `db_ledger`.`Payment_Frequency` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Subscription_Payment_History`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Subscription_Payment_History` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `subscription_id` INT NOT NULL,
  `payment_date` DATE NOT NULL,
  `total` DOUBLE NOT NULL,
  `exchange_rate` DOUBLE NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_Subscription_Payment_History_Subscriptions1_idx` (`subscription_id` ASC),
  CONSTRAINT `fk_Subscription_Payment_History_Subscriptions1`
    FOREIGN KEY (`subscription_id`)
    REFERENCES `db_ledger`.`Subscription` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Expense`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Expense` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `wallet_id` INT NOT NULL,
  `expense_type_id` INT NOT NULL,
  `vendor_id` INT NOT NULL,
  `description` VARCHAR(120) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  `total` DOUBLE NOT NULL,
  `buy_date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_expense_UNIQUE` (`id` ASC),
  INDEX `fk_expense_vendor_idx` (`vendor_id` ASC),
  INDEX `fk_expense_wallet_idx` (`wallet_id` ASC),
  INDEX `fk_expense_expense_type_idx` (`expense_type_id` ASC),
  CONSTRAINT `fk_expense_vendor`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `db_ledger`.`CAT_Vendor` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_expense_wallet`
    FOREIGN KEY (`wallet_id`)
    REFERENCES `db_ledger`.`Wallet` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_expense_expense_type`
    FOREIGN KEY (`expense_type_id`)
    REFERENCES `db_ledger`.`CAT_Expense_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Monthly_With_No_Interest`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Monthly_With_No_Interest` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `credit_card_id` INT NOT NULL,
  `expense_id` INT NOT NULL,
  `start_date` DATE NOT NULL,
  `months` INT(2) NOT NULL,
  `paid_months` INT(2) NOT NULL DEFAULT 0,
  `archived` INT(2) NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `fk_monthly_no_interest_credit_card` (`credit_card_id` ASC),
  INDEX `fk_monthly_no_interest_expense_idx` (`expense_id` ASC),
  UNIQUE INDEX `id_monthly_no_interest_UNIQUE` (`id` ASC),
  CONSTRAINT `fk_monthly_no_interest_credit_card`
    FOREIGN KEY (`credit_card_id`)
    REFERENCES `db_ledger`.`Credit_Card` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_monthly_no_interest_expense`
    FOREIGN KEY (`expense_id`)
    REFERENCES `db_ledger`.`Expense` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Investment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Investment` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `owner_id` INT NOT NULL,
  `currency_id` INT NOT NULL,
  `name` VARCHAR(20) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  `interest_rate` DOUBLE NOT NULL,
  `description` VARCHAR(100) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NULL,
  `total` DOUBLE NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `fk_investment_owner_idx` (`owner_id` ASC),
  INDEX `fk_investment_currency_idx` (`currency_id` ASC),
  UNIQUE INDEX `id_investment_UNIQUE` (`id` ASC),
  CONSTRAINT `fk_investment_owner`
    FOREIGN KEY (`owner_id`)
    REFERENCES `db_ledger`.`Owner` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_investment_currency`
    FOREIGN KEY (`currency_id`)
    REFERENCES `db_ledger`.`Currency` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Beneficiary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Beneficiary` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `owner_id` INT NOT NULL,
  `name` VARCHAR(100) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_beneficiary_UNIQUE` (`id` ASC),
  INDEX `fk_beneficiary_owner_idx` (`owner_id` ASC),
  CONSTRAINT `fk_beneficiary_owner`
    FOREIGN KEY (`owner_id`)
    REFERENCES `db_ledger`.`Owner` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Lend_Money`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Lend_Money` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `owner_id` INT NOT NULL,
  `expense_id` INT NOT NULL,
  `beneficiary_id` INT NOT NULL,
  `payment_frequency_id` INT NOT NULL,
  `total` DOUBLE NOT NULL,
  `interest_rate` DOUBLE NOT NULL DEFAULT 0,
  `paid` DOUBLE NOT NULL DEFAULT 0,
  `last_payment_date` DATE NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_lend_money_expense_idx` (`expense_id` ASC),
  INDEX `fk_lend_money_owner_idx` (`owner_id` ASC),
  INDEX `fk_lend_money_beneficiary_idx` (`beneficiary_id` ASC),
  INDEX `fk_lend_money_payment_frequency` (`payment_frequency_id` ASC),
  UNIQUE INDEX `id_lend_money_UNIQUE` (`id` ASC),
  CONSTRAINT `fk_lend_money_expense`
    FOREIGN KEY (`expense_id`)
    REFERENCES `db_ledger`.`Expense` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lend_money_owner`
    FOREIGN KEY (`owner_id`)
    REFERENCES `db_ledger`.`Owner` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lend_money_beneficiary`
    FOREIGN KEY (`beneficiary_id`)
    REFERENCES `db_ledger`.`Beneficiary` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lend_money_payment_frequency`
    FOREIGN KEY (`payment_frequency_id`)
    REFERENCES `db_ledger`.`Payment_Frequency` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Credit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Credit` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `payment_frequency_id` INT NOT NULL,
  `wallet_id` INT NOT NULL,
  `description` VARCHAR(500) CHARACTER SET 'utf8' COLLATE 'utf8_spanish2_ci' NULL,
  `total` DOUBLE NOT NULL,
  `current_payments` INT NOT NULL,
  `total_payments` INT NOT NULL,
  `last_payment` DATE NOT NULL,
  `interest_rate` DOUBLE NULL DEFAULT 0,
  `paid` DOUBLE NOT NULL DEFAULT 0,
  `pay_rate` DOUBLE NOT NULL,
  `remaining_payment` DOUBLE NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_credit_UNIQUE` (`id` ASC),
  INDEX `fk_credit_payment_frequency_idx` (`payment_frequency_id` ASC),
  INDEX `fk_credit_wallet_idx` (`wallet_id` ASC),
  CONSTRAINT `fk_credit_payment_frequency`
    FOREIGN KEY (`payment_frequency_id`)
    REFERENCES `db_ledger`.`Payment_Frequency` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_credit_wallet`
    FOREIGN KEY (`wallet_id`)
    REFERENCES `db_ledger`.`Wallet` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Digital_Wallet_Payment_Wallet`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Digital_Wallet_Payment_Wallet` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `digital_wallet_id` INT NOT NULL,
  `payment_wallet_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_digital_wallet_id_idx` (`digital_wallet_id` ASC),
  UNIQUE INDEX `id_digital_payment_wallet_UNIQUE` (`id` ASC),
  INDEX `fk_payment_wallet_id_idx` (`payment_wallet_id` ASC),
  CONSTRAINT `fk_digital_wallet_id_idx`
    FOREIGN KEY (`digital_wallet_id`)
    REFERENCES `db_ledger`.`Wallet` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_payment_wallet_id_idx`
    FOREIGN KEY (`payment_wallet_id`)
    REFERENCES `db_ledger`.`Wallet` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_ledger`.`Credit_Card_Payment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`Credit_Card_Payment` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `credit_card_id` INT NOT NULL,
  `payment_total` DOUBLE NOT NULL,
  `payment_date` DATE NOT NULL,
  `period_cut_date` DATE NOT NULL,
  `period_due_date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_credit_card_payment_idx` (`credit_card_id` ASC),
  CONSTRAINT `fk_credit_card_payment`
    FOREIGN KEY (`credit_card_id`)
    REFERENCES `db_ledger`.`Credit_Card` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `db_ledger` ;

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`tarjetaCreditoView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`tarjetaCreditoView` (`idTarjetaCredito` INT, `Tarjeta` INT, `Banco` INT, `FechaCorte` INT, `PeriodoInicialCobro` INT, `PeriodoFinalCobro` INT, `FechaLimitePago` INT, `LimiteCredito` INT, `CreditoDisponible` INT, `SaldoActual` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`MesesSinInteresView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`MesesSinInteresView` (`IdCompra` INT, `IdTarjetaCredito` INT, `Tarjeta` INT, `Compra` INT, `Parcialidad` INT, `Mensualidad` INT, `Costo` INT, `Pagado` INT, `Restante` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`MesesSinIntSummaryView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`MesesSinIntSummaryView` (`idTarjetaCredito` INT, `Tarjeta` INT, `Parcialidad` INT, `Pagado` INT, `Restante` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`MesesSinInteresHistorialView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`MesesSinInteresHistorialView` (`IdCompra` INT, `IdTarjetaCredito` INT, `Tarjeta` INT, `Compra` INT, `Parcialidad` INT, `Mensualidades` INT, `Costo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`HistorialBeneficiarioPagosMesesSinInteresView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`HistorialBeneficiarioPagosMesesSinInteresView` (`IdPago` INT, `idPrestamo` INT, `idCompra` INT, `idBeneficiario` INT, `Beneficiario` INT, `Compra` INT, `FechaPago` INT, `Abono` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`HistorialSummaryPagoBeneficiarioMesesSinInteresView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`HistorialSummaryPagoBeneficiarioMesesSinInteresView` (`idBeneficiario` INT, `idPrestamo` INT, `Beneficiario` INT, `Compra` INT, `FechaCompra` INT, `Pagado` INT, `Saldo` INT, `Estado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`HistorialPagoSubView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`HistorialPagoSubView` (`Subscripcion` INT, `Domiciliado` INT, `Tarjeta` INT, `FechaPago` INT, `Costo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`SubscripcionView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`SubscripcionView` (`idSubscripcion` INT, `Subscripcion` INT, `idEntidad` INT, `Domiciliado` INT, `idTarjetaCredito` INT, `Tarjeta` INT, `Costo` INT, `Total` INT, `Frecuencia` INT, `UltimoCobro` INT, `SiguienteCobro` INT, `Estado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`SubscripcionMensualView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`SubscripcionMensualView` (`idSubscripcion` INT, `Subscripcion` INT, `idEntidad` INT, `Domiciliado` INT, `idTarjetaCredito` INT, `Tarjeta` INT, `Costo` INT, `Frecuencia` INT, `SiguienteCobro` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`TotalSubscripcionMensualView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`TotalSubscripcionMensualView` (`Tarjeta` INT, `Costo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`CryptoCurrencyView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`CryptoCurrencyView` (`IdCurrency` INT, `CryptoCurrency` INT, `Currency` INT, `TOTAL_MXN` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`gastosView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`gastosView` (`idGasto` INT, `idEntidad` INT, `EntidadCrediticia` INT, `idTarjetaCredito` INT, `Tarjeta` INT, `idCategory` INT, `categoria` INT, `idSubCategory` INT, `subCategoria` INT, `idVendor` INT, `Vendor` INT, `descripcion` INT, `fechaCompra` INT, `costo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`PeriodoComprasTarjetas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`PeriodoComprasTarjetas` (`idTarjetaCredito` INT, `Tarjeta` INT, `FechaCorte` INT, `PERIODO` INT, `PERIODO_VALUE` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`CategorySummary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`CategorySummary` (`idCategory` INT, `categoria` INT, `idSubCategory` INT, `subCategoria` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`FrecuenciaPagoView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`FrecuenciaPagoView` (`idFrecuenciaPago` INT, `nombre` INT, `meses` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`MonthlyPayment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`MonthlyPayment` (`idTarjetaCredito` INT, `idSubscripcion` INT, `fechaPago` INT, `pago` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`VW_Monthly_With_No_Interest_Summary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`VW_Monthly_With_No_Interest_Summary` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_ledger`.`VW_Monthly_With_No_Interest_Summary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_ledger`.`VW_Monthly_With_No_Interest_Summary` (`id` INT);

-- -----------------------------------------------------
-- View `db_ledger`.`tarjetaCreditoView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`tarjetaCreditoView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `tarjetaCreditoView` AS
SELECT 
tc.idTarjetaCredito,
tc.shortName Tarjeta,
ec.nombre Banco,
CASE WHEN 
STR_TO_DATE(CONCAT(MONTH(NOW()),'-',tc.diaCorte,'-',YEAR(NOW())), '%m-%d-%Y') > NOW()
THEN
STR_TO_DATE(CONCAT(MONTH(NOW()),'-',tc.diaCorte,'-',YEAR(NOW())), '%m-%d-%Y')
ELSE
STR_TO_DATE(CONCAT(MONTH(DATE_ADD(NOW(), INTERVAL 1 MONTH)),'-',tc.diaCorte,'-', YEAR(DATE_ADD(NOW(), INTERVAL 1 MONTH))), '%m-%d-%Y')
END FechaCorte,
CASE WHEN 
STR_TO_DATE(CONCAT(MONTH(NOW()),'-',tc.diaCorte+1,'-',YEAR(NOW())), '%m-%d-%Y') > NOW()
THEN
STR_TO_DATE(CONCAT(MONTH(DATE_SUB(NOW(), INTERVAL 1 MONTH)),'-',tc.diaCorte+1,'-',YEAR(DATE_SUB(NOW(), INTERVAL 1 MONTH))), '%m-%d-%Y')
ELSE
STR_TO_DATE(CONCAT(MONTH(NOW()),'-',tc.diaCorte+1,'-',YEAR(NOW())), '%m-%d-%Y')
END PeriodoInicialCobro,
CASE WHEN 
STR_TO_DATE(CONCAT(MONTH(NOW()),'-',tc.diaCorte+1,'-',YEAR(NOW())), '%m-%d-%Y') > NOW()
THEN
STR_TO_DATE(CONCAT(MONTH(NOW()),'-',tc.diaCorte,'-',YEAR(NOW())), '%m-%d-%Y')
ELSE
STR_TO_DATE(CONCAT(MONTH(DATE_ADD(NOW(), INTERVAL 1 MONTH)),'-',tc.diaCorte,'-',YEAR(DATE_ADD(NOW(), INTERVAL 1 MONTH))), '%m-%d-%Y')
END PeriodoFinalCobro,
CASE WHEN 
STR_TO_DATE(CONCAT(MONTH(NOW()),'-',tc.diaLimitePago+1,'-',YEAR(NOW())), '%m-%d-%Y') > NOW()
THEN
STR_TO_DATE(CONCAT(MONTH(NOW()),'-',tc.diaLimitePago+1,'-',YEAR(NOW())), '%m-%d-%Y')
ELSE
STR_TO_DATE(CONCAT(MONTH(DATE_ADD(NOW(), INTERVAL 1 MONTH)),'-',tc.diaLimitePago+1,'-',YEAR(DATE_ADD(NOW(), INTERVAL 1 MONTH))), '%m-%d-%Y')
END FechaLimitePago,
tc.credito LimiteCredito,
tc.credito-tc.creditoUtilizado CreditoDisponible,
tc.creditoUtilizado SaldoActual
FROM `tarjetacredito` tc
LEFT JOIN entidadcrediticia eC ON eC.idEntidad = tc.idEntidad;

-- -----------------------------------------------------
-- View `db_ledger`.`MesesSinInteresView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`MesesSinInteresView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `MesesSinInteresView` AS
SELECT 
mes.IdCompra,
mes.IdTarjetaCredito,
ec.shortName Tarjeta,
mes.Compra,
mes.Precio/mes.NoMeses Parcialidad,
CONCAT(mes.MesesPagados, ' de ', mes.NoMeses) Mensualidad,
mes.Precio Costo,
mes.MesesPagados * (mes.Precio/mes.NoMeses) Pagado,
mes.Precio-mes.MesesPagados * (mes.Precio/mes.NoMeses) Restante
FROM `mesessininteres` mes
LEFT JOIN `tarjetaCredito` ec ON ec.idTarjetaCredito = mes.idTarjetaCredito
WHERE mes.NoMeses !=mes.MesesPagados
ORDER BY Tarjeta, IdCompra ASC;

-- -----------------------------------------------------
-- View `db_ledger`.`MesesSinIntSummaryView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`MesesSinIntSummaryView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `MesesSinIntSummaryView` AS
SELECT 
mes.idTarjetaCredito,
ec.shortName Tarjeta,
SUM(mes.Precio/mes.NoMeses) Parcialidad,
SUM(mes.MesesPagados * (mes.Precio/mes.NoMeses)) Pagado,
SUM(mes.Precio-mes.MesesPagados * (mes.Precio/mes.NoMeses)) Restante
FROM `mesessininteres` mes
LEFT JOIN `tarjetaCredito` ec ON ec.idTarjetaCredito = mes.idTarjetaCredito
WHERE mes.NoMeses != mes.MesesPagados
GROUP BY ec.shortName;

-- -----------------------------------------------------
-- View `db_ledger`.`MesesSinInteresHistorialView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`MesesSinInteresHistorialView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `MesesSinInteresHistorialView` AS
SELECT 
mes.idCompra IdCompra,
mes.IdTarjetaCredito,
ec.shortName Tarjeta,
mes.Compra,
mes.Precio/mes.NoMeses Parcialidad,
mes.NoMeses Mensualidades,
mes.Precio Costo
FROM `mesessininteres` mes
LEFT JOIN `tarjetaCredito` ec ON ec.idTarjetaCredito = mes.idTarjetaCredito
WHERE mes.NoMeses = mes.MesesPagados;

-- -----------------------------------------------------
-- View `db_ledger`.`HistorialBeneficiarioPagosMesesSinInteresView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`HistorialBeneficiarioPagosMesesSinInteresView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `HistorialBeneficiarioPagosMesesSinInteresView` AS
SELECT pago.IdPago, pago.idPrestamo, prestamo.idCompra, beneficiario.idBeneficiario, beneficiario.alias Beneficiario, mes.Compra, pago.fechaPago FechaPago, pago.abono Abono FROM 
`beneficiariopagosmesessininteres` pago
LEFT JOIN `beneficiarioprestamomesessininteres` prestamo ON pago.idPrestamo = prestamo.idPrestamo
LEFT JOIN `beneficiario` beneficiario ON beneficiario.idBeneficiario = prestamo.idBeneficiario
LEFT JOIN `mesessininteres` mes ON mes.idCompra = prestamo.idCompra
ORDER BY mes.Compra, pago.fechaPago;

-- -----------------------------------------------------
-- View `db_ledger`.`HistorialSummaryPagoBeneficiarioMesesSinInteresView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`HistorialSummaryPagoBeneficiarioMesesSinInteresView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `HistorialSummaryPagoBeneficiarioMesesSinInteresView` AS
SELECT beneficiario.idBeneficiario, pago.idPrestamo, beneficiario.alias Beneficiario, mes.Compra, prestamo.fechaCompra FechaCompra, 
SUM(pago.abono) Pagado, mes.Precio-SUM(pago.abono) Saldo,
CASE WHEN mes.Precio-SUM(pago.abono) = 0 THEN 'PAGADO' ELSE 'EN PROCESO' END Estado
FROM 
`beneficiariopagosmesessininteres` pago
LEFT JOIN `beneficiarioprestamomesessininteres` prestamo ON pago.idPrestamo = prestamo.idPrestamo
LEFT JOIN `beneficiario` beneficiario ON beneficiario.idBeneficiario = prestamo.idBeneficiario
LEFT JOIN `mesessininteres` mes ON mes.idCompra = prestamo.idCompra
GROUP BY beneficiario.idBeneficiario, pago.idPrestamo, beneficiario.alias, mes.Compra, prestamo.fechaCompra
ORDER BY mes.Compra, prestamo.fechaCompra;

-- -----------------------------------------------------
-- View `db_ledger`.`HistorialPagoSubView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`HistorialPagoSubView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `HistorialPagoSubView` AS
SELECT 
su.descripcion Subscripcion, ec.nombre Domiciliado, tc.shortName Tarjeta, hSub.fechaPago FechaPago, 
FORMAT(hSub.pago, 2) Costo 
FROM `historialpagosubscripcion` hSub 
LEFT JOIN `subscripcion` su ON hSub.idSubscripcion = su.idSubscripcion 
LEFT JOIN `entidadcrediticia` ec ON su.idEntidad = ec.idEntidad 
LEFT JOIN `tarjetacredito` tc ON su.idTarjetaCredito = tc.idTarjetaCredito 
ORDER BY ec.nombre, hSub.fechaPago;

-- -----------------------------------------------------
-- View `db_ledger`.`SubscripcionView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`SubscripcionView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `SubscripcionView` AS
SELECT su.idSubscripcion, su.descripcion Subscripcion, ec.idEntidad, ec.nombre Domiciliado, tc.idTarjetaCredito, tc.shortName Tarjeta, 
CONCAT('$', FORMAT(su.costo, 2), ' ',di.symbol) Costo, su.costo*di.mxnValue Total, fp.nombre Frecuencia, lp.UltimoCobro,
CASE WHEN su.estado = 'ACTIVA' THEN
DATE_ADD(DATE_ADD(lp.UltimoCobro, INTERVAL fp.fMensual MONTH), INTERVAL fAnual YEAR) ELSE NULL END SiguienteCobro, 
su.estado Estado
FROM `subscripcion` su
LEFT JOIN entidadcrediticia ec ON ec.idEntidad = su.idEntidad
LEFT JOIN tarjetacredito tc ON tc.idTarjetaCredito = su.idTarjetaCredito
LEFT JOIN frecuenciapago fp ON fp.idFrecuenciaPago = su.idFrecuencia
LEFT JOIN divisa di ON di.idDivisa = su.idDivisa
LEFT JOIN (SELECT idSubscripcion, MAX(fechaPago) UltimoCobro
FROM `historialpagosubscripcion`
GROUP BY idSubscripcion) lp ON lp.idSubscripcion = su.idSubscripcion
ORDER BY ec.nombre, tc.shortName;

-- -----------------------------------------------------
-- View `db_ledger`.`SubscripcionMensualView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`SubscripcionMensualView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `SubscripcionMensualView` AS
SELECT sub.idSubscripcion, sub.Subscripcion, sub.idEntidad, sub.Domiciliado, sub.idTarjetaCredito, sub.Tarjeta, sub.Costo, sub.Frecuencia, sub.SiguienteCobro 
FROM `subscripcionview` sub 
LEFT JOIN `tarjetacreditoview` tc ON tc.idTarjetaCredito = sub.idTarjetaCredito 
WHERE sub.Estado = "ACTIVA" 
AND 
sub.SiguienteCobro BETWEEN tc.PeriodoInicialCobro AND tc.PeriodoFinalCobro;

-- -----------------------------------------------------
-- View `db_ledger`.`TotalSubscripcionMensualView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`TotalSubscripcionMensualView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `TotalSubscripcionMensualView` AS
SELECT sub.Tarjeta, SUM(sub.Total) Costo
FROM `subscripcionview` sub 
LEFT JOIN `tarjetacreditoview` tc ON tc.idTarjetaCredito = sub.idTarjetaCredito 
WHERE sub.Estado = "ACTIVA" 
AND 
sub.SiguienteCobro BETWEEN tc.PeriodoInicialCobro AND tc.PeriodoFinalCobro
GROUP BY sub.Tarjeta;

-- -----------------------------------------------------
-- View `db_ledger`.`CryptoCurrencyView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`CryptoCurrencyView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `CryptoCurrencyView` AS
SELECT c.idCryptocurrency IdCurrency, 
d.description CryptoCurrency,
CONCAT(FORMAT(c.currency, 10), ' ', d.symbol) Currency, 
CONCAT(FORMAT(c.currency*d.mxnValue, 2), ' MXN') TOTAL_MXN 
FROM `cryptocurrency` c LEFT JOIN divisa d ON d.idDivisa = c.idDivisa;

-- -----------------------------------------------------
-- View `db_ledger`.`gastosView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`gastosView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `gastosView` AS
SELECT 
g.idGasto, g.idEntidad, e.nombre EntidadCrediticia, t.idTarjetaCredito, t.shortName Tarjeta, 
c.idCategory, c.categoria, g.idSubCategory, sc.subCategoria, g.idVendor, v.vendorDescription Vendor, 
g.descripcion, g.fechaCompra, g.costo 
FROM `gastos` g 
INNER JOIN subcategory sc ON sc.idSubCategory = g.idSubCategory 
INNER JOIN category c ON c.idCategory = sc.idCategory 
INNER JOIN entidadcrediticia e ON e.idEntidad = g.idEntidad 
INNER JOIN tarjetacredito t ON t.idTarjetaCredito = g.IdTarjetaCredito 
INNER JOIN vendor v ON v.idVendor = g.idVendor 
ORDER BY g.fechaCompra ASC;

-- -----------------------------------------------------
-- View `db_ledger`.`PeriodoComprasTarjetas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`PeriodoComprasTarjetas`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `PeriodoComprasTarjetas` AS
SELECT 
tc.idTarjetaCredito, tc.Tarjeta, 
STR_TO_DATE(CONCAT(MONTH(fechaCompra),'-',DAY(tc.FechaCorte),'-', YEAR(fechaCompra)), '%m-%d-%Y') FechaCorte, 
CONCAT(MONTH(fechaCompra), ' ', YEAR(fechaCompra)) PERIODO, 
CASE WHEN 
STR_TO_DATE(CONCAT(MONTH(fechaCompra),'-',DAY(tc.FechaCorte),'-', YEAR(fechaCompra)), '%m-%d-%Y') 
BETWEEN tc.PeriodoInicialCobro AND tc.PeriodoFinalCobro THEN 0 
ELSE 
TIMESTAMPDIFF(MONTH, STR_TO_DATE(CONCAT(MONTH(fechaCompra),'-',DAY(tc.FechaCorte),'-', YEAR(fechaCompra)), '%m-%d-%Y'), STR_TO_DATE(CONCAT(MONTH(tc.FechaCorte),'-',DAY(tc.FechaCorte),'-', YEAR(tc.FechaCorte)), '%m-%d-%Y') )-1 END PERIODO_VALUE 
FROM `gastos` gv 
INNER JOIN tarjetacreditoview tc ON tc.idTarjetaCredito = gv.idTarjetaCredito 
WHERE STR_TO_DATE(CONCAT(MONTH(fechaCompra),'-',DAY(tc.FechaCorte),'-', YEAR(fechaCompra)), '%m-%d-%Y')<NOW() 
GROUP BY tc.idTarjetaCredito, tc.Tarjeta, MONTH(fechaCompra), YEAR(fechaCompra) 
ORDER BY tc.idTarjetaCredito, PERIODO_VALUE;

-- -----------------------------------------------------
-- View `db_ledger`.`CategorySummary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`CategorySummary`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `CategorySummary` AS
SELECT cat.idCategory, cat.categoria, sub.idSubCategory, sub.subCategoria FROM `subcategory` sub LEFT JOIN `category` cat ON sub.idCategory = cat.idCategory ORDER BY cat.categoria, sub.subCategoria;

-- -----------------------------------------------------
-- View `db_ledger`.`FrecuenciaPagoView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`FrecuenciaPagoView`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `FrecuenciaPagoView` AS
SELECT idFrecuenciaPago, nombre, (fMensual+fAnual*12) meses FROM `frecuenciapago` ORDER BY fAnual, fMensual;

-- -----------------------------------------------------
-- View `db_ledger`.`MonthlyPayment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`MonthlyPayment`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `MonthlyPayment` AS
Select `sub`.`idTarjetaCredito`, `sub`.`idSubscripcion` AS `idSubscripcion`, `sub`.`SiguienteCobro` AS `fechaPago`, sb.costo as pago
from (`ledger`.`subscripcionview` `sub` left join `ledger`.`tarjetacreditoview` `tc` on(`tc`.`idTarjetaCredito` = `sub`.`idTarjetaCredito`)) 
LEFT JOIN subscripcion sb ON sub.idSubscripcion = sb.idSubscripcion
where 
`sub`.`Estado` = 'ACTIVA' and `sub`.`SiguienteCobro` 
between 
DATE_SUB(`tc`.`PeriodoInicialCobro`, INTERVAL 1 MONTH)
and 
DATE_SUB(`tc`.`PeriodoFinalCobro`, INTERVAL 1 MONTH);

-- -----------------------------------------------------
-- View `db_ledger`.`VW_Monthly_With_No_Interest_Summary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`VW_Monthly_With_No_Interest_Summary`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `VW_Monthly_With_No_Interest_Summary` AS
WITH summary AS (
SELECT 
vw.credit_card_id, vw.wallet_id, vw.credit_card,
sum(initial_charge) AS initial_charge, sum(remaining_debt) AS remaining_debt
FROM `VW_Monthly_With_No_Interest` vw
GROUP BY vw.credit_card_id, vw.wallet_id, vw.credit_card
UNION 
SELECT 
NULL AS credit_card_id, NULL AS wallet_id, 'Total' AS credit_card,
sum(initial_charge) AS initial_charge, sum(remaining_debt) AS remaining_debt
FROM `VW_Monthly_With_No_Interest` vw )
SELECT s.credit_card_id, s.wallet_id, s.credit_card, 
s.initial_charge, CONCAT('$ ', FORMAT(s.initial_charge, 2, 'es_MX')) initial_charge_formatted,
s.remaining_debt, CONCAT('$ ', FORMAT(s.remaining_debt, 2, 'es_MX')) remaining_debt_formatted
FROM summary s;

-- -----------------------------------------------------
-- View `db_ledger`.`VW_Monthly_With_No_Interest_Summary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_ledger`.`VW_Monthly_With_No_Interest_Summary`;
USE `db_ledger`;
CREATE  OR REPLACE VIEW `VW_Monthly_With_No_Interest_Summary` AS
WITH summary AS (
SELECT 
vw.credit_card_id, vw.wallet_id, vw.credit_card,
sum(initial_charge) AS initial_charge, sum(remaining_debt) AS remaining_debt
FROM `VW_Monthly_With_No_Interest` vw
GROUP BY vw.credit_card_id, vw.wallet_id, vw.credit_card
UNION 
SELECT 
NULL AS credit_card_id, NULL AS wallet_id, 'Total' AS credit_card,
sum(initial_charge) AS initial_charge, sum(remaining_debt) AS remaining_debt
FROM `VW_Monthly_With_No_Interest` vw )
SELECT s.credit_card_id, s.wallet_id, s.credit_card, 
s.initial_charge, CONCAT('$ ', FORMAT(s.initial_charge, 2, 'es_MX')) initial_charge_formatted,
s.remaining_debt, CONCAT('$ ', FORMAT(s.remaining_debt, 2, 'es_MX')) remaining_debt_formatted
FROM summary s;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
